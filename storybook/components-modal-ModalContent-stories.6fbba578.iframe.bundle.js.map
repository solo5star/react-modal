{"version":3,"file":"components-modal-ModalContent-stories.6fbba578.iframe.bundle.js","mappings":";;AAYA;ACWA;AACA;;;AAWA;;;;ACnBA;AACA;;;;;;;;;;;;AAqBA","sources":["webpack://@solo5star/react-modal/./src/components/modal/ModalBackdrop.tsx","webpack://@solo5star/react-modal/./src/components/modal/ModalContent.tsx","webpack://@solo5star/react-modal/./src/components/modal/ModalRoot.tsx"],"sourcesContent":["import type React from 'react';\nimport { styled } from 'styled-components';\nimport type { StyledProps } from '../../types/StyledProps';\n\nconst Backdrop = styled.div`\n  background-color: rgba(0, 0, 0, 0.4);\n`;\n\ntype ModalBackdropProps = StyledProps<{\n  onClick?: () => void;\n}>;\n\nexport const ModalBackdrop: React.FC<ModalBackdropProps> = (props) => {\n  const { onClick, className } = props;\n\n  return <Backdrop onClick={onClick} className={className} />;\n};\n","import type { PropsWithChildren } from 'react';\nimport { styled } from 'styled-components';\nimport type { StyledProps } from '../../types/StyledProps';\n\ntype ModalContentPlacement = 'top' | 'bottom' | 'left' | 'right' | 'center';\n\ntype ContentProps = {\n  $placement: ModalContentPlacement;\n};\n\nconst getAlignSelf = (placement: ModalContentPlacement) => {\n  if (placement === 'top') return 'flex-start';\n  if (placement === 'bottom') return 'flex-end';\n  return 'center';\n};\n\nconst getJustifySelf = (placement: ModalContentPlacement) => {\n  if (placement === 'left') return 'flex-start';\n  if (placement === 'right') return 'flex-end';\n  return 'center';\n};\n\nconst Content = styled.article<ContentProps>`\n  align-self: ${(props) => getAlignSelf(props.$placement)};\n  justify-self: ${(props) => getJustifySelf(props.$placement)};\n\n  z-index: 1;\n`;\n\ntype ModalContentProps = PropsWithChildren<\n  StyledProps<{\n    placement?: ModalContentPlacement;\n  }>\n>;\n\nexport const ModalContent: React.FC<ModalContentProps> = (props) => {\n  const { placement = 'center', className, children } = props;\n\n  return (\n    <Content $placement={placement} className={className}>\n      {children}\n    </Content>\n  );\n};\n","import type { PropsWithChildren } from 'react';\nimport ReactDOM from 'react-dom';\nimport { createGlobalStyle, styled } from 'styled-components';\nimport { useKeyEvent } from '../../hooks/useKeyEvent';\nimport type { StyledProps } from '../../types/StyledProps';\n\ntype RootProps = {\n  $open?: boolean;\n};\n\nconst PreventBodyScroll = createGlobalStyle`\n  body {\n    overflow: hidden;\n  }\n`;\n\nconst Root = styled.div<RootProps>`\n  display: ${(props) => (props.$open ? 'grid' : 'none')};\n\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 1000;\n\n  & > * {\n    grid-area: 1 / 1 / 1 / 1;\n  }\n`;\n\ntype ModalRootProps = PropsWithChildren<\n  StyledProps<{\n    open?: boolean;\n    onClose?: () => void;\n  }>\n>;\n\nexport const ModalRoot: React.FC<ModalRootProps> = (props) => {\n  const { open, onClose, className, children } = props;\n\n  useKeyEvent('down', (event) => {\n    if (event.key === 'Escape') onClose?.();\n  });\n\n  return ReactDOM.createPortal(\n    <>\n      {open && <PreventBodyScroll />}\n      <Root $open={open} className={className}>\n        {children}\n      </Root>\n    </>,\n    document.body,\n  );\n};\n"],"names":[],"sourceRoot":""}